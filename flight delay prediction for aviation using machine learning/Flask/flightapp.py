# -*- coding: utf-8 -*-
"""flightapp

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KyHkzM3cx7EqvVJFapBQJvTQaS_KrHlU
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import pickle
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
import sklearn
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import RandomizedSearchCV
import imblearn
from sklearn.model_selection import train_test_split
import imblearn
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, f1_score

dataset = pd.read_csv("/content/flightdata.csv")
dataset.head()

dataset.info()

dataset = dataset.drop('Unnamed: 25',axis=1)
dataset.isnull().sum()

dataset = dataset[
    ["FL_NUM", "MONTH", "DAY_OF_MONTH","DAY_OF_WEEK", "ORIGIN", "DEST", "CRS_ARR_TIME", "DEP_DEL15", "ARR_DEL15"]]
dataset.isnull().sum()

dataset[dataset.isnull().any(axis=1)].head(10)

dataset['DEP_DEL15'].mode()

dataset = dataset.fillna({'ARR_DEL15': 1})
dataset = dataset.fillna({'DEP_DEL15': 0})
dataset.iloc[177:185]

import math

for index,row in dataset.iterrows():
  dataset.loc[index,'CRS_ARR_TIME']=math.floor(row['CRS_ARR_TIME']/100)

dataset.head()

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
dataset['DEST']=le.fit_transform(dataset['DEST'])
dataset['ORIGIN']=le.fit_transform(dataset['ORIGIN'])

dataset.head(5)

dataset['ORIGIN'].unique()

dataset=pd.get_dummies(dataset,columns=['ORIGIN','DEST'])

dataset.head()

x=dataset.iloc[:,0:8].values
y=dataset.iloc[:,8:9].values

x

from sklearn.preprocessing import OneHotEncoder
oh=OneHotEncoder()
z=oh.fit_transform(x[:,4:5]).toarray()
t=oh.fit_transform(x[:,4:5]).toarray()

z

t

x=np.delete(x,[4,5],axis=1)

flight_data=pd.read_csv('/content/flightdata.csv')

flight_data.describe()

sns.displot(flight_data.MONTH)

sns.scatterplot(x='ARR_DELAY',y='ARR_DEL15',data=flight_data)

sns.catplot(x='ARR_DEL15',y='ARR_DELAY',kind='bar',data=flight_data)

sns.heatmap(dataset.corr())



dataset=pd.get_dummies(dataset,columns=['ORIGIN_0','DEST_0'])
dataset.head()

x=dataset.iloc[:,0:16].values
y=dataset.iloc[:,16:17].values

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)

from sklearn.model_selection import train_test_split 
train_x,test_x,train_y,test_y=train_test_split(dataset.drop('ARR_DEL15',axis=1),dataset['ARR_DEL15'],test_size=0.2,random_state=0)

x_test.shape

x_train.shape

y_test.shape

y_train.shape

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
x_train=sc.fit_transform(x_train)
x_test=sc.transform(x_test)

from sklearn.tree import DecisionTreeClassifier
classifier=DecisionTreeClassifier(random_state=0)
classifier.fit(x_train,y_train)

decisiontree=classifier.predict(x_test)

decisiontree

from sklearn.metrics import accuracy_score
desacc=accuracy_score(y_test,decisiontree)

from sklearn.ensemble import RandomForestClassifier
rfc=RandomForestClassifier(n_estimators=10,criterion='entropy')

rfc.fit(x_train,y_train)

y_predict=rfc.predict(x_test)

#Importing the keras libraries and packages
import tensorflow
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

#Creating ANN sklentom view
classification=Sequential()
classification.add(Dense(30,activation='relu'))
classification.add(Dense(128,activation='relu'))
classification.add(Dense(64,activation='relu'))
classification.add(Dense(32,activation='relu'))
classification.add(Dense(1,activation='sigmoid'))

#Compiling the ANN model
classification.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

#Train the model
classification.fit(x_train,y_train,batch_size=4,validation_split=0.2,epochs=100)

y_pred=classification.predict([[129,99,1,0,0,1,0,1,1,1,0,1,1,1,1,1]])

print(y_pred)
(y_pred)

#RandomForest
y_pred=rfc.predict([[129,99,1,0,0,1,0,1,1,1,0,1,1,1,1,1]])
print(y_pred)
(y_pred)

classification.save('fight.h5')

#Testing the model
y_pred=classification.predict(x_test)

y_pred

y_pred=(y_pred>0.5)
y_pred

def predict_exit(sample_value):
  sample_value=np.array(sample_value)
  sample_value=sample_value.reshapr(1,-1)
  sample_value=sc.transform(sample_value)
  return classifier.predict(sample_value)

test=classification.predict([[1,1,121.000000,36.0,0,0,1,0,1,1,1,1,1,1,1,1]])
if test==1:
    print('Prediction: chance of delay')
else:
   print('Prediction: No chance of delay')

from sklearn import model_selection
from sklearn.neural_network import MLPClassifier

dfs=[]
models=[
    ('RF',RandomForestClassifier()),
    ('DecisionTree',DecisionTreeClassifier()),
    ('ANN',MLPClassifier())
      ]
results=[]
  names=[]
  scoring=['accuracy','precision_weighted','recall_weighted','f1_weighted','roc_auc']
  target_names = ['no delay','delay']

for name, model in models:
  kfold = model_selection.KFold(n_splits=5, shuffle=True, random_state=90210)
  cv_results = model_selection.cross_validate(model, x_train,y_train,cv=kfold,scoring=scoring)
  clf = model. fit(x_train,y_train)
  y_pred = clf.predict(x_test)
  print(name)
  print(classification_report (y_test, y_pred, target_names=target_names))
  results.append(cv_results)
  names.append(name)
  this_df = pd.DataFrame(cv_results)
  this_df['model']=name
  dfs.append(this_df)
  final=pd.concat(dfs,ignore_index=True)

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test,y_predict)
cm

from sklearn.metrics import accuracy_score
desacc = accuracy_score(y_test, decisiontree)

desacc

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test,decisiontree)

cm

from sklearn.metrics import accuracy_score, classification_report
score = accuracy_score(y_pred, y_test)
print('The accuracy for ANN model is: {}%'.format(score*100))

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
cm

parameters ={
'_estimators' : [1,20,30,55,68, 74, 90, 120, 115],
'criterion': ['gini', 'entropy'],
'max _features' : ["auto", "sart", "log2"],
'max_depth' : [2,5,8,10], 'verbose' : [1,2,3,4,6, 8, 9, 10]
}

RCV= RandomizedSearchCV(estimator=rfc,param_distributions=parameters,cv=10,n_iter=4)

import pickle
pickle.dump(RCV,open('/flight.pkl', 'wb'))

from flask import Flask, request, render_template 
import numpy as np 
import pandas as pd 
import pickle 
import os

model = pickle. load (open ('/flight.pkl', 'rb'))
app = Flask(__name__)

@app.route('/')
@app.route('/prediction',methods=['POST'])
def home():
  return render_template("index.html")

def predict():
  name = request.form ['name']
  month = request.form [ 'month' ]
  dayofmonth = request.form[ 'dayofmonth' ]
  dayofweek = request.form[ 'dayofweek']
  origin = request.form['origin']
  destination = request.form['destination']
  if (origin == "msp"):
    origin1,origin2,origin3,origin4,orgin5 = 0,0,0,0,1
  if (origin == "dtw"):
    origin1,origin2,origin3,origin4,orgin5 = 1,0,0,0,0
  if (origin == "jfk"):
    origin1,origin2,origin3,origin4,orgin5 = 0,0,1,0,0
  if (origin == "sea"):
    origin1, origin2, origin3, origin4, orgin5 = 0,1,0,0,0
  if(origin == "alt"):
    origin1, origin2,origin3, origin4,orgin5 = 0,0,0,1,0
    if (destination== "msp"):
      destinationi, destination2, destination3, destination4, destinations = 0,0,0,0,1
    if (destination =="dtw"):
      destinationI,destination2,destination3,destination4,destinations=1,0,0,0,0
    if (destination == "jfk"):
      destinationI, destination2, destination3, destination4, destination5 = 0,0,1,0,0
    if (destination == "sea"):
      destinationI, destination2, destination3, destination, destinations = 0,1,0,0,0
    if(destination == "alt"):
      destinationi,destination2,destination3,destination4,destinations=0,0,0,1,0
      dept = request.form['dept']
      arrtime = request. form['arrtime']
      actdept = request. form['actdept']
      dept15=int (dept)-int (actdept)
      total - [[name, month, dayofmonth, dayofweek, origin1, origin2, origin3, origin4, orgin5, destination1, destination2, destination3, destination4, destination5,i]]
      y_pred = model.predict (total)
      print (y_pred)
    if (y_pred==[0.]):
      ans="The Flight will be on time" 
    else:
      ans="The Flight will be delayed"
      return render_template ("index.html", showcase = ans)

if __name__=='__main__':
  app.run(debug=True)